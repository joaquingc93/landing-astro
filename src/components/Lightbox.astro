---
// Lightbox component for image galleries
// Can be used in any page that needs lightbox functionality
---

<!-- Lightbox Modal -->
<div id="lightbox-modal" style="position: fixed !important; top: 0 !important; left: 0 !important; right: 0 !important; bottom: 0 !important; width: 100vw !important; height: 100vh !important; z-index: 50 !important; display: flex !important; align-items: center !important; justify-content: center !important; background-color: rgba(0, 0, 0, 0.8) !important; backdrop-filter: blur(4px) !important; transition: all 0.3s ease !important;" class="opacity-0 invisible">
  <div class="relative max-w-7xl max-h-[90vh] w-full flex items-center justify-center mx-4">
    <!-- Close Button -->
    <button id="lightbox-close" class="absolute -top-12 right-0 text-white hover:text-gray-300 transition-colors z-10">
      <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
    
    <!-- Image Container -->
    <div class="relative bg-white rounded-lg overflow-hidden shadow-2xl flex items-center justify-center">
      <img id="lightbox-image" src="" alt="" class="max-w-full max-h-[80vh] w-auto h-auto object-contain" />
      
      <!-- Navigation Buttons -->
      <button id="lightbox-prev" class="absolute left-4 top-1/2 -translate-y-1/2 bg-white/90 hover:bg-white text-gray-800 p-3 rounded-full shadow-lg transition-all duration-200 hover:scale-110">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      
      <button id="lightbox-next" class="absolute right-4 top-1/2 -translate-y-1/2 bg-white/90 hover:bg-white text-gray-800 p-3 rounded-full shadow-lg transition-all duration-200 hover:scale-110">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>
      
      <!-- Image Info -->
      <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-6 text-white">
        <div class="flex items-center justify-between">
          <div>
            <h3 id="lightbox-title" class="text-lg font-semibold mb-1"></h3>
            <p id="lightbox-counter" class="text-sm text-gray-300"></p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Lightbox functionality - uses both DOMContentLoaded and astro:page-load for reliable initialization
  function initializeLightbox() {
    console.log('ðŸŽ¯ Lightbox: Initializing...');
    
    // Get lightbox elements
    const lightboxModal = document.getElementById('lightbox-modal');
    const lightboxImage = document.getElementById('lightbox-image');
    const lightboxTitle = document.getElementById('lightbox-title');
    const lightboxCounter = document.getElementById('lightbox-counter');
    const lightboxClose = document.getElementById('lightbox-close');
    const lightboxPrev = document.getElementById('lightbox-prev');
    const lightboxNext = document.getElementById('lightbox-next');
    
    console.log('ðŸŽ¯ Lightbox: Modal element found:', !!lightboxModal);
    
    let currentLightboxIndex = 0;
    let lightboxImages = [];
    
    // Collect all gallery images with proper selectors
    const galleryTriggers = document.querySelectorAll('.gallery-image-trigger, .project-image, .gallery-trigger');
    console.log('ðŸŽ¯ Lightbox: Found gallery triggers:', galleryTriggers.length);
    
    // Clear previous images array
    lightboxImages = [];
    
    galleryTriggers.forEach((trigger, index) => {
      // Handle project gallery triggers differently (from homepage project cards)
      if (trigger.classList.contains('gallery-trigger')) {
        const projectId = trigger.dataset.projectId;
        
        // Remove any existing listeners to avoid duplicates
        trigger.removeEventListener('click', handleProjectGalleryClick);
        
        // Add click event listener for project gallery
        function handleProjectGalleryClick(e) {
          e.preventDefault();
          e.stopPropagation();
          console.log('ðŸŽ¯ Lightbox: Project gallery clicked for project:', projectId);
          openProjectGallery(projectId);
        }
        
        trigger.addEventListener('click', handleProjectGalleryClick);
        trigger.style.cursor = 'pointer';
        return;
      }
      
      // Handle regular image triggers (from service pages)
      const imageData = {
        url: trigger.dataset.imageUrl || trigger.querySelector('img')?.src || '',
        alt: trigger.dataset.imageAlt || trigger.querySelector('img')?.alt || '',
        title: trigger.dataset.imageTitle || trigger.dataset.projectTitle || `Image ${index + 1}`,
        index: index
      };
      
      console.log('ðŸŽ¯ Lightbox: Adding image:', imageData.title, imageData.url);
      lightboxImages.push(imageData);
      
      // Remove any existing listeners to avoid duplicates
      trigger.removeEventListener('click', handleImageClick);
      
      // Add click event listener
      function handleImageClick(e) {
        e.preventDefault();
        e.stopPropagation();
        console.log('ðŸŽ¯ Lightbox: Image clicked, opening at index:', index);
        openLightbox(index);
      }
      
      trigger.addEventListener('click', handleImageClick);
      
      // Make it visually clear it's clickable
      trigger.style.cursor = 'pointer';
    });
    
    console.log('ðŸŽ¯ Lightbox: Total images collected:', lightboxImages.length);
    
    // Open project gallery function for homepage project cards
    function openProjectGallery(projectId) {
      console.log('ðŸŽ¯ Lightbox: Opening project gallery for project:', projectId);
      
      // Get project data from global window object
      const projectsData = (window as any).projectsData || [];
      const project = projectsData.find(p => p.id.toString() === projectId.toString());
      
      if (!project) {
        console.error('ðŸŽ¯ Lightbox: Project not found:', projectId);
        return;
      }
      
      // Clear current images and load project images
      lightboxImages = [];
      
      // For fallback projects with project_gallery array
      if (project.acf?.project_gallery && Array.isArray(project.acf.project_gallery)) {
        project.acf.project_gallery.forEach((img, index) => {
          lightboxImages.push({
            url: img.url,
            alt: img.alt || project.title.rendered,
            title: `${project.title.rendered} - Image ${index + 1}`,
            index: index
          });
        });
      } else {
        // For WordPress projects, collect project images from acf_fields
        const acfData = project.acf_fields || project.acf || {};
        for (let i = 1; i <= 6; i++) {
          const imageField = acfData[`project_image_${i}`];
          if (imageField && typeof imageField === 'object' && imageField.url) {
            let imageUrl = imageField.url;
            // Convert WordPress local URLs to proxy-friendly paths
            if (imageUrl && imageUrl.includes('renovalinksite.local')) {
              imageUrl = imageUrl.replace('http://renovalinksite.local', '');
            }
            
            lightboxImages.push({
              url: imageUrl,
              alt: imageField.alt || project.title.rendered,
              title: `${project.title.rendered} - Image ${lightboxImages.length + 1}`,
              index: lightboxImages.length
            });
          }
        }
      }
      
      if (lightboxImages.length === 0) {
        console.error('ðŸŽ¯ Lightbox: No images found for project:', projectId);
        return;
      }
      
      console.log('ðŸŽ¯ Lightbox: Project images loaded:', lightboxImages.length);
      
      // Open lightbox at first image
      currentLightboxIndex = 0;
      updateLightboxContent();
      
      lightboxModal.classList.remove('opacity-0', 'invisible');
      lightboxModal.classList.add('opacity-100', 'visible');
      document.body.style.overflow = 'hidden';
      
      console.log('ðŸŽ¯ Lightbox: Project gallery opened successfully');
      
      // Force the modal to center properly
      setTimeout(() => {
        lightboxModal.scrollIntoView({ 
          behavior: 'instant', 
          block: 'center', 
          inline: 'center' 
        });
      }, 100);
    }
    
    // Open lightbox function
    function openLightbox(index) {
      console.log('ðŸŽ¯ Lightbox: Opening at index:', index);
      
      if (!lightboxModal || lightboxImages.length === 0) {
        console.error('ðŸŽ¯ Lightbox: Modal or images not available');
        return;
      }
      
      currentLightboxIndex = index;
      updateLightboxContent();
      
      lightboxModal.classList.remove('opacity-0', 'invisible');
      lightboxModal.classList.add('opacity-100', 'visible');
      document.body.style.overflow = 'hidden';
      
      console.log('ðŸŽ¯ Lightbox: Opened successfully');
      
      // Force the modal to center properly
      setTimeout(() => {
        lightboxModal.scrollIntoView({ 
          behavior: 'instant', 
          block: 'center', 
          inline: 'center' 
        });
      }, 100);
    }
    
    // Close lightbox function
    function closeLightbox() {
      console.log('ðŸŽ¯ Lightbox: Closing');
      
      if (!lightboxModal) return;
      
      lightboxModal.classList.add('opacity-0', 'invisible');
      lightboxModal.classList.remove('opacity-100', 'visible');
      document.body.style.overflow = '';
    }
    
    // Update lightbox content
    function updateLightboxContent() {
      const image = lightboxImages[currentLightboxIndex];
      if (image && lightboxImage && lightboxTitle && lightboxCounter) {
        lightboxImage.src = image.url;
        lightboxImage.alt = image.alt;
        lightboxTitle.textContent = image.title || '';
        lightboxCounter.textContent = `${currentLightboxIndex + 1} / ${lightboxImages.length}`;
        
        // Update navigation buttons visibility
        if (lightboxPrev && lightboxNext) {
          lightboxPrev.style.display = lightboxImages.length > 1 ? 'block' : 'none';
          lightboxNext.style.display = lightboxImages.length > 1 ? 'block' : 'none';
        }
        
        console.log('ðŸŽ¯ Lightbox: Content updated for:', image.title);
      }
    }
    
    // Navigate lightbox
    function navigateLightbox(direction) {
      if (direction === 'prev') {
        currentLightboxIndex = currentLightboxIndex > 0 ? currentLightboxIndex - 1 : lightboxImages.length - 1;
      } else {
        currentLightboxIndex = currentLightboxIndex < lightboxImages.length - 1 ? currentLightboxIndex + 1 : 0;
      }
      updateLightboxContent();
      console.log('ðŸŽ¯ Lightbox: Navigated to index:', currentLightboxIndex);
    }
    
    // Event listeners for lightbox controls
    if (lightboxClose) {
      lightboxClose.removeEventListener('click', closeLightbox);
      lightboxClose.addEventListener('click', closeLightbox);
    }
    
    if (lightboxPrev) {
      lightboxPrev.removeEventListener('click', () => navigateLightbox('prev'));
      lightboxPrev.addEventListener('click', () => navigateLightbox('prev'));
    }
    
    if (lightboxNext) {
      lightboxNext.removeEventListener('click', () => navigateLightbox('next'));
      lightboxNext.addEventListener('click', () => navigateLightbox('next'));
    }
    
    // Close on background click
    if (lightboxModal) {
      lightboxModal.removeEventListener('click', handleModalClick);
      
      function handleModalClick(e) {
        if (e.target === lightboxModal) {
          closeLightbox();
        }
      }
      
      lightboxModal.addEventListener('click', handleModalClick);
    }
    
    // Keyboard navigation for lightbox
    function handleKeydown(e) {
      if (lightboxModal && lightboxModal.classList.contains('visible')) {
        if (e.key === 'Escape') closeLightbox();
        if (e.key === 'ArrowLeft') navigateLightbox('prev');
        if (e.key === 'ArrowRight') navigateLightbox('next');
      }
    }
    
    document.removeEventListener('keydown', handleKeydown);
    document.addEventListener('keydown', handleKeydown);
    
    console.log('ðŸŽ¯ Lightbox: Initialization complete');
  }

  // Initialize on DOMContentLoaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeLightbox);
  } else {
    // If DOM is already loaded, initialize immediately
    initializeLightbox();
  }

  // Also initialize on astro:page-load for SPA navigation
  document.addEventListener('astro:page-load', initializeLightbox);
</script>