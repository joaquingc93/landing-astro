---
// Lightbox component for image galleries
// Can be used in any page that needs lightbox functionality
import { normalizeMediaUrl } from '@/lib/media-url';
---

<!-- Lightbox Modal -->
<div id="lightbox-modal" style="position: fixed !important; top: 0 !important; left: 0 !important; right: 0 !important; bottom: 0 !important; width: 100vw !important; height: 100vh !important; z-index: 50 !important; display: flex !important; align-items: center !important; justify-content: center !important; background-color: rgba(0, 0, 0, 0.8) !important; backdrop-filter: blur(4px) !important; transition: all 0.3s ease !important;" class="opacity-0 invisible">
  <div class="relative max-w-7xl max-h-[90vh] w-full flex items-center justify-center mx-4">
    <!-- Close Button -->
    <button id="lightbox-close" class="absolute -top-12 right-0 text-white hover:text-gray-300 transition-colors z-10">
      <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
    
    <!-- Image Container -->
    <div class="relative bg-white rounded-lg overflow-hidden shadow-2xl flex items-center justify-center">
      <img id="lightbox-image" src="" alt="" class="max-w-full max-h-[80vh] w-auto h-auto object-contain" />
      
      <!-- Navigation Buttons -->
      <button id="lightbox-prev" class="absolute left-4 top-1/2 -translate-y-1/2 bg-white/90 hover:bg-white text-gray-800 p-3 rounded-full shadow-lg transition-all duration-200 hover:scale-110">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>

          <button id="lightbox-next" class="absolute right-4 top-1/2 -translate-y-1/2 bg-white/90 hover:bg-white text-gray-800 p-3 rounded-full shadow-lg transition-all duration-200 hover:scale-110">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
          </button>
      
      <!-- Image Info -->
      <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-6 text-white">
        <div class="flex items-center justify-between">
          <div>
            <h3 id="lightbox-title" class="text-lg font-semibold mb-1"></h3>
            <p id="lightbox-counter" class="text-sm text-gray-300"></p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
// @ts-nocheck
// Plain JS Lightbox script (no TypeScript) - rewritten to fix previous syntax errors
(function() {
  function safeNormalize(url) {
    try { return (typeof normalizeMediaUrl === 'function' ? (normalizeMediaUrl(url) || url) : url); } catch { return url; }
  }

  function initializeLightbox() {
    const lightboxModal = document.getElementById('lightbox-modal');
    if (!lightboxModal) return; // Nothing to do if modal missing
    const lightboxImage = document.getElementById('lightbox-image');
    const lightboxTitle = document.getElementById('lightbox-title');
    const lightboxCounter = document.getElementById('lightbox-counter');
    const lightboxClose = document.getElementById('lightbox-close');
    const lightboxPrev = document.getElementById('lightbox-prev');
    const lightboxNext = document.getElementById('lightbox-next');

    let currentIndex = 0;
    let images = [];

    function updateLightboxContent() {
      const image = images[currentIndex];
      if (!image || !lightboxImage) return;
      lightboxImage.src = safeNormalize(image.url);
      lightboxImage.alt = image.alt || '';
      if (lightboxTitle) lightboxTitle.textContent = image.title || '';
      if (lightboxCounter) lightboxCounter.textContent = `${currentIndex + 1} / ${images.length}`;
      if (lightboxPrev && lightboxNext) {
        const multi = images.length > 1;
        lightboxPrev.style.display = multi ? 'block' : 'none';
        lightboxNext.style.display = multi ? 'block' : 'none';
      }
    }

    function openLightbox(index) {
      if (!images.length) return;
      currentIndex = index;
      updateLightboxContent();
      lightboxModal.classList.remove('opacity-0', 'invisible');
      lightboxModal.classList.add('opacity-100', 'visible');
      document.body.style.overflow = 'hidden';
      setTimeout(() => {
        lightboxModal.scrollIntoView({ behavior: 'instant', block: 'center', inline: 'center' });
      }, 60);
    }

    function closeLightbox() {
      lightboxModal.classList.add('opacity-0', 'invisible');
      lightboxModal.classList.remove('opacity-100', 'visible');
      document.body.style.overflow = '';
    }

    function navigate(direction) {
      if (!images.length) return;
      if (direction === 'prev') {
        currentIndex = currentIndex > 0 ? currentIndex - 1 : images.length - 1;
      } else {
        currentIndex = currentIndex < images.length - 1 ? currentIndex + 1 : 0;
      }
      updateLightboxContent();
    }

    function openProjectGallery(projectId) {
      if (!projectId) return;
      const projectsData = (window.projectsData) || [];
      const project = projectsData.find(p => p.id && p.id.toString() === projectId.toString());
      if (!project) return;
      images = [];
      if (project.acf && Array.isArray(project.acf.project_gallery)) {
        project.acf.project_gallery.forEach((img, i) => {
          images.push({ url: img.url, alt: img.alt || project.title?.rendered || '', title: `${project.title?.rendered || 'Project'} - Image ${i + 1}`, index: i });
        });
      } else {
        const acfData = project.acf_fields || project.acf || {};
        for (let i = 1; i <= 6; i++) {
          const imageField = acfData[`project_image_${i}`];
          if (imageField && imageField.url) {
            images.push({ url: safeNormalize(imageField.url), alt: imageField.alt || project.title?.rendered || '', title: `${project.title?.rendered || 'Project'} - Image ${images.length + 1}`, index: images.length });
          }
        }
      }
      if (!images.length) return;
      currentIndex = 0;
      updateLightboxContent();
      lightboxModal.classList.remove('opacity-0', 'invisible');
      lightboxModal.classList.add('opacity-100', 'visible');
      document.body.style.overflow = 'hidden';
    }

    // Collect triggers
    images = [];
    const galleryTriggers = document.querySelectorAll('.gallery-image-trigger, .project-image, .gallery-trigger');
    galleryTriggers.forEach((trigger, idx) => {
      if (trigger.classList.contains('gallery-trigger')) {
        trigger.addEventListener('click', e => { e.preventDefault(); e.stopPropagation(); openProjectGallery(trigger.getAttribute('data-project-id')); });
        trigger.style.cursor = 'pointer';
        return;
      }
      const imgEl = trigger.querySelector('img');
      const ds = trigger.dataset || {};
      const data = {
        url: ds.imageUrl || (imgEl && imgEl.src) || '',
        alt: ds.imageAlt || (imgEl && imgEl.alt) || '',
        title: ds.imageTitle || ds.projectTitle || `Image ${idx + 1}`,
        index: idx
      };
      images.push(data);
      trigger.addEventListener('click', e => { e.preventDefault(); e.stopPropagation(); openLightbox(idx); });
      trigger.style.cursor = 'pointer';
    });
    // Initial nav button state
    if (lightboxPrev && lightboxNext) {
      const multi = images.length > 1;
      lightboxPrev.style.display = multi ? 'block' : 'none';
      lightboxNext.style.display = multi ? 'block' : 'none';
    }

    // Wire controls
    if (lightboxClose) lightboxClose.addEventListener('click', closeLightbox);
    if (lightboxPrev) lightboxPrev.addEventListener('click', () => navigate('prev'));
    if (lightboxNext) lightboxNext.addEventListener('click', () => navigate('next'));
    lightboxModal.addEventListener('click', e => { if (e.target === lightboxModal) closeLightbox(); });
    document.addEventListener('keydown', e => {
      if (!lightboxModal.classList.contains('visible')) return;
      if (e.key === 'Escape') closeLightbox();
      if (e.key === 'ArrowLeft') navigate('prev');
      if (e.key === 'ArrowRight') navigate('next');
    });
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeLightbox);
  } else {
    initializeLightbox();
  }
  document.addEventListener('astro:page-load', initializeLightbox);
})();
</script>